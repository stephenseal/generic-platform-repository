/**
 * 
 */
package ${mapperpackagename};

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Date;

import org.apache.log4j.Logger;
import org.modelmapper.Converter;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.modelmapper.spi.MappingContext;
import org.springframework.beans.factory.annotation.Autowired;

import generic.processing.framework.data.mapper.DataMappingException;
import generic.processing.framework.data.mapper.IDataMapper;
import generic.processing.framework.data.repository.GenericRepository;
import ${modelpackagename}.*;

/**
 * Generated by the platform plugin to facilitate the mapping between 
 * Transfer and Model objects
 *
 * @author System
 *
 */
public class T2MDataMapper implements IDataMapper {
	
	/**
	 * The Logger...
	 */
	static Logger logger = Logger.getLogger(T2MDataMapper.class);
	
	/**
	 * Repository for managing DB state
	 */
	@Autowired
	GenericRepository repository;
	
	/**
	 * Default Constructor
	 */
	public T2MDataMapper() {
		// TODO Auto-generated constructor stub
	}

	/* (non-Javadoc)
	 * @see generic.processing.framework.data.mapper.IDataMapper#mapObject(java.lang.Object)
	 */
	public Object mapObject(Object mapFrom) throws DataMappingException {
		try {
			logger.info("About to mapObject... : " + mapFrom.getClass().getName());
			String className = mapFrom.getClass().getSimpleName();
			logger.info("mapFrom : " + className);
			ModelMapper modelMapper = new ModelMapper();


			<#list tablelists as tablelist>
			modelMapper.createTypeMap(${transferpackagename}.${capitaliseFirst(tablelist.tablename)}.class, ${capitaliseFirst(tablelist.tablename)}.class).setConverter(
					new Converter<${transferpackagename}.${capitaliseFirst(tablelist.tablename)}, ${capitaliseFirst(tablelist.tablename)}>() {
						public ${capitaliseFirst(tablelist.tablename)} convert(MappingContext<${transferpackagename}.${capitaliseFirst(tablelist.tablename)}, ${capitaliseFirst(tablelist.tablename)}> context) {
							logger.info("We are attampting to map from transfer to model for ${tablelist.tablename}...");
							${transferpackagename}.${capitaliseFirst(tablelist.tablename)} ${tablelist.tablename}Source = context.getSource();
							logger.info("${tablelist.tablename}Source : " + ${tablelist.tablename}Source);							
							${capitaliseFirst(tablelist.tablename)} ${tablelist.tablename}Dest = context.getDestination();
					<#list tablelist.variablelist as variable>
						<#if variable.isForeign() >
							${capitaliseFirst(variable.relation.pkTable)} ${variable.relation.pkTable} = (${capitaliseFirst(variable.relation.pkTable)})repository.get("${modelpackagename}.${capitaliseFirst(variable.relation.pkTable)}", ${tablelist.tablename}Source.get${capitaliseFirst(variable.relation.pkColumn)}());
							${tablelist.tablename}Dest.set${capitaliseFirst(variable.relation.pkTable)}(${variable.relation.pkTable});
						<#else>
							${tablelist.tablename}Dest.set${capitaliseFirst(variable.name)}(${tablelist.tablename}Source.get${capitaliseFirst(variable.name)}());
						</#if>
					</#list>
							logger.info("${tablelist.tablename}Dest : " + ${tablelist.tablename}Dest);							
							logger.info("Returned ${capitaliseFirst(tablelist.tablename)} : " + ${tablelist.tablename}Dest);
							return ${tablelist.tablename}Dest;
						}
					}
			);
				
			</#list>	

			modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.LOOSE);
			logger.info("MapObject.packageName : ${modelpackagename}");
			Object mappedObj =modelMapper.map(mapFrom, Class.forName("${modelpackagename}." + className));
			logger.info("mappedObject : " + mappedObj);
			return mappedObj;
		} catch(Exception e) {
			logger.info("Exception occured : " + e.getMessage());
			logger.info("Exception occured : " + e.getStackTrace().toString());
			StringWriter sw = new StringWriter();
			e.printStackTrace(new PrintWriter(sw));
			String exceptionAsString = sw.toString();
			logger.info("Exception String : " + exceptionAsString);
		}
		return null;
	}

}

<#function capitaliseFirst text>
	<#local len = text?length />
	<#return text[0..0]?upper_case + text[1..len-1]  >
</#function>